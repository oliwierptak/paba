<?php declare(strict_types = 1);

namespace Paba\Configurator;

use InvalidArgumentException;
use UnexpectedValueException;
use function array_key_exists;
use function ctype_upper;
use function is_array;
use function is_object;
use function method_exists;
use function sprintf;
use function strtolower;
use function trim;

/**
 * Code generated by POPO generator, do not edit.
 * https://packagist.org/packages/popo/generator
 */
class PabaScenario 
{
    protected array $data = array (
  'name' => NULL,
  'url' => NULL,
  'host' => NULL,
  'headers' => 
  array (
  ),
  'comment' => NULL,
  'run' => 1,
  'concurrency' => 1,
  'step' => 0,
  'repeat' => 0,
  'timeout' => 120,
  'sleep' => 0,
);

    protected array $default = array (
  'name' => NULL,
  'url' => NULL,
  'host' => NULL,
  'headers' => 
  array (
  ),
  'comment' => NULL,
  'run' => 1,
  'concurrency' => 1,
  'step' => 0,
  'repeat' => 0,
  'timeout' => 120,
  'sleep' => 0,
);

    protected array $propertyMapping = array (
  'name' => 'string',
  'url' => 'string',
  'host' => 'string',
  'headers' => 'array',
  'comment' => 'string',
  'run' => 'int',
  'concurrency' => 'int',
  'step' => 'int',
  'repeat' => 'int',
  'timeout' => 'int',
  'sleep' => 'int',
);

    protected array $collectionItems = array (
);

    protected array $updateMap = [];

    /**
     * @param string $property
     *
     * @return mixed|null
     */
    protected function popoGetValue(string $property)
    {
        if (!isset($this->data[$property])) {
            if ($this->typeIsObject($this->propertyMapping[$property])) {
                $popo = new $this->propertyMapping[$property];
                $this->data[$property] = $popo;
            } else {
                return null;
            }
        }

        return $this->data[$property];
    }

    /**
     * @param string $property
     * @param mixed $value
     *
     * @return void
     */
    protected function popoSetValue(string $property, $value): void
    {
        $this->data[$property] = $value;

        $this->updateMap[$property] = true;
    }

    /**
     * @param string $property
     *
     * @throws UnexpectedValueException
     * @return void
     */
    protected function assertPropertyValue(string $property): void
    {
        if (!isset($this->data[$property])) {
            throw new UnexpectedValueException(sprintf(
                'Required value of "%s" has not been set',
                $property
            ));
        }
    }

    /**
     * @param string $propertyName
     * @param mixed $value
     *
     * @throws \InvalidArgumentException
     * @return void
     */
    protected function addCollectionItem(string $propertyName, $value): void
    {
        $type = trim(strtolower($this->propertyMapping[$propertyName]));
        $collection = $this->popoGetValue($propertyName) ?? [];

        if (!is_array($collection) || $type !== 'array') {
            throw new InvalidArgumentException('Cannot add item to non array type: ' . $propertyName);
        }

        $collection[] = $value;

        $this->popoSetValue($propertyName, $collection);
    }

    public function toArray(): array
    {
        $data = [];

        foreach ($this->propertyMapping as $key => $type) {
            if (!array_key_exists($key, $data)) {
                $data[$key] = $this->default[$key] ?? null;
            }
            $value = $this->data[$key];

            if ($this->isCollectionItem($key) && is_array($value)) {
                foreach ($value as $popo) {
                    if (is_object($popo) && method_exists($popo, 'toArray')) {
                        $data[$key][] = $popo->toArray();
                    }
                }

                continue;
            }

            if (is_object($value) && method_exists($value, 'toArray')) {
                $data[$key] = $value->toArray();
                continue;
            }

            $data[$key] = $value;
        }

        return $data;
    }

    public function fromArray(array $data): PabaScenario
    {
        foreach ($this->propertyMapping as $key => $type) {
            $result[$key] = $this->default[$key] ?? null;

            if ($this->typeIsObject($type)) {
                $popo = new $this->propertyMapping[$key];
                if (method_exists($popo, 'fromArray')) {
                    $popoData = $data[$key] ?? $this->default[$key] ?? [];
                    $popo->fromArray($popoData);
                }
                $result[$key] = $popo;

                continue;
            }

            if (array_key_exists($key, $data)) {
                if ($this->isCollectionItem($key)) {
                    foreach ($data[$key] as $popoData) {
                        $popo = new $this->collectionItems[$key]();
                        if (method_exists($popo, 'fromArray')) {
                            $popo->fromArray($popoData);
                        }
                        $result[$key][] = $popo;
                    }
                } else {
                    $result[$key] = $data[$key];
                }
            }
        }

        $this->data = $result;

        foreach ($data as $key => $value) {
            if (!array_key_exists($key, $result)) {
                continue;
            }

            $type = $this->propertyMapping[$key] ?? null;
            if ($type !== null) {
                $value = $this->typecastValue($type, $result[$key]);
                $this->popoSetValue($key, $value);
            }
        }

        return $this;
    }

    /**
     * @param string $type
     * @param mixed $value
     *
     * @return mixed
     */
    protected function typecastValue(string $type, $value)
    {
        if ($value === null) {
            return $value;
        }

        switch ($type) {
            case 'int':
                $value = (int)$value;
                break;
            case 'string':
                $value = (string)$value;
                break;
            case 'bool':
                $value = (bool)$value;
                break;
            case 'array':
                $value = (array)$value;
                break;
        }

        return $value;
    }

    protected function isCollectionItem(string $key): bool
    {
        return array_key_exists($key, $this->collectionItems);
    }

    protected function typeIsObject(string $value): bool
    {
        return $value[0] === '\\' && ctype_upper($value[1]);
    }
    
    /**
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->popoGetValue('name');
    }

    /**
     * @param string|null $name
     *
     * @return PabaScenario
     */
    public function setName(?string $name): PabaScenario
    {
        $this->popoSetValue('name', $name);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @throws \UnexpectedValueException
     *
     * @return string
     */
    public function requireName(): string
    {
        $this->assertPropertyValue('name');

        return (string)$this->popoGetValue('name');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasName(): bool
    {
        return $this->updateMap['name'] ?? false;
    }

    /**
     * @return string|null
     */
    public function getUrl(): ?string
    {
        return $this->popoGetValue('url');
    }

    /**
     * @param string|null $url
     *
     * @return PabaScenario
     */
    public function setUrl(?string $url): PabaScenario
    {
        $this->popoSetValue('url', $url);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @throws \UnexpectedValueException
     *
     * @return string
     */
    public function requireUrl(): string
    {
        $this->assertPropertyValue('url');

        return (string)$this->popoGetValue('url');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasUrl(): bool
    {
        return $this->updateMap['url'] ?? false;
    }

    /**
     * @return string|null
     */
    public function getHost(): ?string
    {
        return $this->popoGetValue('host');
    }

    /**
     * @param string|null $host
     *
     * @return PabaScenario
     */
    public function setHost(?string $host): PabaScenario
    {
        $this->popoSetValue('host', $host);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @throws \UnexpectedValueException
     *
     * @return string
     */
    public function requireHost(): string
    {
        $this->assertPropertyValue('host');

        return (string)$this->popoGetValue('host');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasHost(): bool
    {
        return $this->updateMap['host'] ?? false;
    }

    /**
     * @return array|null
     */
    public function getHeaders(): ?array
    {
        return $this->popoGetValue('headers');
    }

    /**
     * @param array|null $headers
     *
     * @return PabaScenario
     */
    public function setHeaders(?array $headers): PabaScenario
    {
        $this->popoSetValue('headers', $headers);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @throws \UnexpectedValueException
     *
     * @return array
     */
    public function requireHeaders(): array
    {
        $this->assertPropertyValue('headers');

        return (array)$this->popoGetValue('headers');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasHeaders(): bool
    {
        return $this->updateMap['headers'] ?? false;
    }

    /**
     * @return string|null
     */
    public function getComment(): ?string
    {
        return $this->popoGetValue('comment');
    }

    /**
     * @param string|null $comment
     *
     * @return PabaScenario
     */
    public function setComment(?string $comment): PabaScenario
    {
        $this->popoSetValue('comment', $comment);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @throws \UnexpectedValueException
     *
     * @return string
     */
    public function requireComment(): string
    {
        $this->assertPropertyValue('comment');

        return (string)$this->popoGetValue('comment');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasComment(): bool
    {
        return $this->updateMap['comment'] ?? false;
    }

    /**
     * @return integer|null
     */
    public function getRun(): ?int
    {
        return $this->popoGetValue('run');
    }

    /**
     * @param integer|null $run
     *
     * @return PabaScenario
     */
    public function setRun(?int $run): PabaScenario
    {
        $this->popoSetValue('run', $run);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @throws \UnexpectedValueException
     *
     * @return integer
     */
    public function requireRun(): int
    {
        $this->assertPropertyValue('run');

        return (int)$this->popoGetValue('run');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasRun(): bool
    {
        return $this->updateMap['run'] ?? false;
    }

    /**
     * @return integer|null
     */
    public function getConcurrency(): ?int
    {
        return $this->popoGetValue('concurrency');
    }

    /**
     * @param integer|null $concurrency
     *
     * @return PabaScenario
     */
    public function setConcurrency(?int $concurrency): PabaScenario
    {
        $this->popoSetValue('concurrency', $concurrency);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @throws \UnexpectedValueException
     *
     * @return integer
     */
    public function requireConcurrency(): int
    {
        $this->assertPropertyValue('concurrency');

        return (int)$this->popoGetValue('concurrency');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasConcurrency(): bool
    {
        return $this->updateMap['concurrency'] ?? false;
    }

    /**
     * @return integer|null
     */
    public function getStep(): ?int
    {
        return $this->popoGetValue('step');
    }

    /**
     * @param integer|null $step
     *
     * @return PabaScenario
     */
    public function setStep(?int $step): PabaScenario
    {
        $this->popoSetValue('step', $step);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @throws \UnexpectedValueException
     *
     * @return integer
     */
    public function requireStep(): int
    {
        $this->assertPropertyValue('step');

        return (int)$this->popoGetValue('step');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasStep(): bool
    {
        return $this->updateMap['step'] ?? false;
    }

    /**
     * @return integer|null
     */
    public function getRepeat(): ?int
    {
        return $this->popoGetValue('repeat');
    }

    /**
     * @param integer|null $repeat
     *
     * @return PabaScenario
     */
    public function setRepeat(?int $repeat): PabaScenario
    {
        $this->popoSetValue('repeat', $repeat);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @throws \UnexpectedValueException
     *
     * @return integer
     */
    public function requireRepeat(): int
    {
        $this->assertPropertyValue('repeat');

        return (int)$this->popoGetValue('repeat');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasRepeat(): bool
    {
        return $this->updateMap['repeat'] ?? false;
    }

    /**
     * @return integer|null
     */
    public function getTimeout(): ?int
    {
        return $this->popoGetValue('timeout');
    }

    /**
     * @param integer|null $timeout
     *
     * @return PabaScenario
     */
    public function setTimeout(?int $timeout): PabaScenario
    {
        $this->popoSetValue('timeout', $timeout);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @throws \UnexpectedValueException
     *
     * @return integer
     */
    public function requireTimeout(): int
    {
        $this->assertPropertyValue('timeout');

        return (int)$this->popoGetValue('timeout');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasTimeout(): bool
    {
        return $this->updateMap['timeout'] ?? false;
    }

    /**
     * @return integer|null
     */
    public function getSleep(): ?int
    {
        return $this->popoGetValue('sleep');
    }

    /**
     * @param integer|null $sleep
     *
     * @return PabaScenario
     */
    public function setSleep(?int $sleep): PabaScenario
    {
        $this->popoSetValue('sleep', $sleep);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @throws \UnexpectedValueException
     *
     * @return integer
     */
    public function requireSleep(): int
    {
        $this->assertPropertyValue('sleep');

        return (int)$this->popoGetValue('sleep');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasSleep(): bool
    {
        return $this->updateMap['sleep'] ?? false;
    }

    
    /**
     * @param $item
     *
     * @return PabaScenario
     */
    public function addHeader($item): PabaScenario
    {
        $this->addCollectionItem('headers', $item);

        return $this;
    }

}
